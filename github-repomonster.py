import requests
import random
import time
import os
from datetime import datetime

# GitHub personal access token (use environment variables for security)
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN", "your_personal_access_token_here")
ORG_NAME = os.getenv("ORG_NAME", "your_org_name_here")  # Organization where templates exist & new repos will be created

# List of available template repositories in the organization
TEMPLATE_REPOS = [
    "Enterprise_Template-1",
    "Enterprise_Template-2",
    "Enterprise_Template-3"
]

# Number of repositories to create
NUM_REPOS = 10

# Hardcoded list of 50 adjectives
ADJECTIVES = [
    "agile", "brave", "calm", "daring", "eager", "fierce", "gentle", "happy", "icy", "jolly",
    "keen", "lively", "mighty", "noble", "optimistic", "peppy", "quick", "radiant", "spunky", "tough",
    "upbeat", "vibrant", "witty", "youthful", "zany", "bold", "charming", "dazzling", "elegant", "fearless",
    "graceful", "heroic", "inventive", "jovial", "kindhearted", "luminous", "magnetic", "nimble", "outgoing", "playful",
    "quirky", "resilient", "spirited", "tenacious", "unwavering", "versatile", "whimsical", "zealous", "adventurous", "bright"
]

# Hardcoded list of 50 animals
ANIMALS = [
    "aardvark", "badger", "cougar", "dolphin", "elephant", "falcon", "gazelle", "hedgehog", "ibex", "jaguar",
    "kangaroo", "lemur", "mongoose", "narwhal", "octopus", "penguin", "quokka", "raccoon", "squirrel", "tiger",
    "urchin", "vulture", "walrus", "xerus", "yak", "zebra", "beaver", "chameleon", "dogfish", "emu",
    "flamingo", "gorilla", "hyena", "iguana", "jackal", "koala", "lynx", "moose", "newt", "ocelot",
    "puma", "quail", "rhinoceros", "skunk", "toucan", "unicornfish", "vole", "wolf", "xerus", "yeti"
]

# Generate timestamped filename for output log
timestamp_str = datetime.now().strftime("%Y%m%d-%H%M%S")
output_filename = f"github-repomonster-created-{timestamp_str}.txt"

# Function to generate a unique repository name
def generate_repo_name():
    adjective = random.choice(ADJECTIVES)
    animal = random.choice(ANIMALS)
    now = datetime.now()
    timestamp = now.strftime("%S%f")  # Add seconds and microseconds to ensure uniqueness
    return f"{adjective}_{animal}_{timestamp}"

# Function to create a repository from a template
def create_repo(repo_name, template_name, description="Generated by GitHub_RepoMonster script", private=True):
    api_url = f"https://api.github.com/repos/{ORG_NAME}/{template_name}/generate"

    payload = {
        "owner": ORG_NAME,
        "name": repo_name,
        "description": description
    }

    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github+json"
    }

    response = requests.post(api_url, headers=headers, json=payload)

    if response.status_code == 201:
        print(f"‚úÖ Successfully created repo: {repo_name} from {template_name}")

        # Write the created repository name to the log file
        with open(output_filename, "a") as file:
            file.write(f"{ORG_NAME}/{repo_name}\n")

    else:
        print(f"‚ùå Failed to create {repo_name} from {template_name}: {response.status_code} - {response.text}")

# üîπ Display Summary Before Execution
print("===============================================")
print(f"üì¢ Starting Repository Creation")
print(f"üìå Organization: {ORG_NAME}")
print(f"üìå Number of Repositories: {NUM_REPOS}")
print(f"üìå Available Templates: {', '.join(TEMPLATE_REPOS)}")
print(f"üìå Logging created repos to: {output_filename}")
print("===============================================\n")

# Create repositories
for _ in range(NUM_REPOS):
    template = random.choice(TEMPLATE_REPOS)  # Select a random template
    repo_name = generate_repo_name()  # Generate a unique name
    create_repo(repo_name, template)  # Create the repository
    time.sleep(1)  # Delay to avoid rate limits

# üîπ Final Completion Message
print("\n===============================================")
print(f"‚úÖ Repository creation complete!")
print(f"üìÇ Created repositories logged in: {output_filename}")
print("üìå This file can be used for automated deletion process.")
print("===============================================\n")
